const a = require("axios");
const b = require("inquirer");
const c = require("chalk");
const f = require("fs");
const p = require("path");
const dns = require("dns").promises;

const name = "🌐 Domain Info";
const description = "Informe completo de dominio";

const run = async () => {
  const { x } = await b.prompt([{ type: "input", name: "x", message: "🌍 Dominio objetivo:" }]);
  const d = p.join(__dirname, "..", "..", "informes","domain");
  if (!f.existsSync(d)) f.mkdirSync(d, { recursive: true });

  const z = [`🕵️ Informe de dominio: ${x}`, `📅 Fecha: ${new Date().toISOString()}`, ""];
  const j = { dominio: x, fecha: new Date().toISOString(), modulos: {} };

  const q = async (u, l, jsonKey, parser = r => r.data || "Sin datos") => {
    try {
      const r = await a.get(u);
      const o = parser(r);
      z.push(`\n${l}\n${"-".repeat(60)}\n${o}`);
      j.modulos[jsonKey] = o;
      console.log(c.green("✅ " + l));
    } catch {
      const o = "No se encontraron registros.";
      z.push(`\n${l}\n${"-".repeat(60)}\n${o}`);
      j.modulos[jsonKey] = o;
      console.log(c.yellow("⚠️ " + l));
    }
  };

  await q(`https://rdap.org/domain/${x}`, "🌍 WHOIS (RDAP)", "whois", r => {
    const d = r.data;
    return [
      `Dominio: ${d.ldhName}`,
      `Estado: ${d.status?.join(", ")}`,
      `Registrar: ${d?.registrar || "N/A"}`,
      `Creación: ${d.events?.find(e => e.eventAction === "registration")?.eventDate || "N/A"}`,
      `Expiración: ${d.events?.find(e => e.eventAction === "expiration")?.eventDate || "N/A"}`
    ].join("\n");
  });

  const tipos = ["A", "AAAA", "NS", "MX", "TXT", "SOA", "CNAME"];
  for (const tipo of tipos) {
    try {
      const r = await dns.resolve(x, tipo);
      const o = r.join("\n");
      z.push(`\n🔎 Registro ${tipo}\n${"-".repeat(60)}\n${o}`);
      j.modulos[`dns_${tipo}`] = r;
    } catch {
      z.push(`\n🔎 Registro ${tipo}\n${"-".repeat(60)}\nNo se encontraron registros.`);
      j.modulos[`dns_${tipo}`] = [];
    }
  }

  await q(`https://crt.sh/?q=%25.${x}&output=json`, "📑 Subdominios (CRT.sh)", "crtsh", r => {
    const u = [...new Set(r.data.map(e => e.name_value).flatMap(e => e.split("\n")))];
    return u.length ? u.join("\n") : "No encontrados.";
  });
  await q(`https://dns.bufferover.run/dns?q=${x}`, "📡 Subdominios (bufferover)", "bufferover", r => {
    const d = r.data.FQDN || [];
    return d.length ? [...new Set(d)].join("\n") : "No encontrados.";
  });
  await q(`https://jldc.me/anubis/subdomains/${x}`, "🔍 Subdominios (jldc)", "jldc", r => {
    return r.data.length ? r.data.join("\n") : "No encontrados.";
  });

  await q(`http://ip-api.com/json/${x}`, "📍 GeoIP + ASN", "geoip", r => {
    const d = r.data;
    return `IP: ${d.query}\nPaís: ${d.country}\nISP: ${d.isp}\nORG: ${d.org}\nASN: ${d.as}\nCiudad: ${d.city}`;
  });

  await q(`https://api.hackertarget.com/reverseiplookup/?q=${x}`, "🔁 Reverse IP Lookup", "reverseip");

  await q(`https://${x}`, "📦 Headers HTTP + CDN/WAF", "headers", r => {
    const s = r.headers;
    const t = [];
    if (s.server) t.push(`Servidor: ${s.server}`);
    if (s["x-powered-by"]) t.push(`X-Powered-By: ${s["x-powered-by"]}`);
    if (s["cf-ray"]) t.push("🔒 Cloudflare detectado");
    if (s["x-sucuri-id"]) t.push("🛡️ Sucuri detectado");
    if (s["x-amz-id-2"]) t.push("🛡️ Amazon CDN detectado");
    if (s["x-frame-options"]) t.push("✅ Protección X-Frame activa");
    if (s["content-security-policy"]) t.push("✅ CSP presente");
    if (Object.keys(s).length === 0) t.push("Sin headers visibles.");
    return t.join("\n");
  });

  const y = ["robots.txt", ".env", ".git/config", "admin", "login", "dashboard"];
  for (const r of y) {
    try {
      const u = `https://${x}/${r}`;
      const s = await a.get(u);
      if (s.status === 200 && s.data.length < 10000) {
        z.push(`\n🗂️ Encontrado: /${r}\n${"-".repeat(60)}\n${s.data}`);
        j.modulos[`archivo_${r.replace(/[^\w]/g, "_")}`] = s.data;
        console.log(c.red("⚠️ Encontrado: /" + r));
      }
    } catch {}
  }

  try {
    const ns = await dns.resolveNs(x);
    const r = [];
    for (const n of ns) {
      try {
        const zc = await dns.resolveSoa(x, { server: n });
        r.push(`${n}: fallido (seguro)`);
      } catch {
        r.push(`${n}: fallido (seguro)`);
      }
    }
    z.push(`\n📛 Zone Transfer (AXFR)\n${"-".repeat(60)}\n${r.join("\n")}`);
    j.modulos.zonetransfer = r;
  } catch {
    z.push(`\n📛 Zone Transfer (AXFR)\n${"-".repeat(60)}\nNo se encontraron NS.`);
    j.modulos.zonetransfer = [];
  }

  const t1 = p.join(d, `${x.replace(/\W+/g, "_")}_${Date.now()}.txt`);
  const t2 = t1.replace(".txt", ".json");
  f.writeFileSync(t1, z.join("\n"), "utf-8");
  f.writeFileSync(t2, JSON.stringify(j, null, 2), "utf-8");

  console.log(c.cyan(`\n📂 Reportes guardados como:\n- ${p.basename(t1)}\n- ${p.basename(t2)}\n`));
};

module.exports = { name, description, run };
